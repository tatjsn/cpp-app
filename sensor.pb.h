// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sensor.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_sensor_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_sensor_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "foo.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_sensor_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_sensor_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sensor_2eproto;
class Sensor;
class SensorDefaultTypeInternal;
extern SensorDefaultTypeInternal _Sensor_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Sensor* Arena::CreateMaybeMessage<::Sensor>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum Sensor_SwitchLevel : int {
  Sensor_SwitchLevel_CLOSED = 0,
  Sensor_SwitchLevel_OPEN = 1
};
bool Sensor_SwitchLevel_IsValid(int value);
constexpr Sensor_SwitchLevel Sensor_SwitchLevel_SwitchLevel_MIN = Sensor_SwitchLevel_CLOSED;
constexpr Sensor_SwitchLevel Sensor_SwitchLevel_SwitchLevel_MAX = Sensor_SwitchLevel_OPEN;
constexpr int Sensor_SwitchLevel_SwitchLevel_ARRAYSIZE = Sensor_SwitchLevel_SwitchLevel_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Sensor_SwitchLevel_descriptor();
template<typename T>
inline const std::string& Sensor_SwitchLevel_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Sensor_SwitchLevel>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Sensor_SwitchLevel_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Sensor_SwitchLevel_descriptor(), enum_t_value);
}
inline bool Sensor_SwitchLevel_Parse(
    const std::string& name, Sensor_SwitchLevel* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Sensor_SwitchLevel>(
    Sensor_SwitchLevel_descriptor(), name, value);
}
// ===================================================================

class Sensor :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Sensor) */ {
 public:
  Sensor();
  virtual ~Sensor();

  Sensor(const Sensor& from);
  Sensor(Sensor&& from) noexcept
    : Sensor() {
    *this = ::std::move(from);
  }

  inline Sensor& operator=(const Sensor& from) {
    CopyFrom(from);
    return *this;
  }
  inline Sensor& operator=(Sensor&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Sensor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Sensor* internal_default_instance() {
    return reinterpret_cast<const Sensor*>(
               &_Sensor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Sensor& a, Sensor& b) {
    a.Swap(&b);
  }
  inline void Swap(Sensor* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Sensor* New() const final {
    return CreateMaybeMessage<Sensor>(nullptr);
  }

  Sensor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Sensor>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Sensor& from);
  void MergeFrom(const Sensor& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Sensor* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Sensor";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sensor_2eproto);
    return ::descriptor_table_sensor_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Sensor_SwitchLevel SwitchLevel;
  static constexpr SwitchLevel CLOSED =
    Sensor_SwitchLevel_CLOSED;
  static constexpr SwitchLevel OPEN =
    Sensor_SwitchLevel_OPEN;
  static inline bool SwitchLevel_IsValid(int value) {
    return Sensor_SwitchLevel_IsValid(value);
  }
  static constexpr SwitchLevel SwitchLevel_MIN =
    Sensor_SwitchLevel_SwitchLevel_MIN;
  static constexpr SwitchLevel SwitchLevel_MAX =
    Sensor_SwitchLevel_SwitchLevel_MAX;
  static constexpr int SwitchLevel_ARRAYSIZE =
    Sensor_SwitchLevel_SwitchLevel_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SwitchLevel_descriptor() {
    return Sensor_SwitchLevel_descriptor();
  }
  template<typename T>
  static inline const std::string& SwitchLevel_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SwitchLevel>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SwitchLevel_Name.");
    return Sensor_SwitchLevel_Name(enum_t_value);
  }
  static inline bool SwitchLevel_Parse(const std::string& name,
      SwitchLevel* value) {
    return Sensor_SwitchLevel_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kFooFieldNumber = 6,
    kTemperatureFieldNumber = 2,
    kHumidityFieldNumber = 3,
    kDoorFieldNumber = 5,
  };
  // required string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // required .Foo foo = 6;
  bool has_foo() const;
  private:
  bool _internal_has_foo() const;
  public:
  void clear_foo();
  const ::Foo& foo() const;
  ::Foo* release_foo();
  ::Foo* mutable_foo();
  void set_allocated_foo(::Foo* foo);
  private:
  const ::Foo& _internal_foo() const;
  ::Foo* _internal_mutable_foo();
  public:

  // required double temperature = 2;
  bool has_temperature() const;
  private:
  bool _internal_has_temperature() const;
  public:
  void clear_temperature();
  double temperature() const;
  void set_temperature(double value);
  private:
  double _internal_temperature() const;
  void _internal_set_temperature(double value);
  public:

  // required int32 humidity = 3;
  bool has_humidity() const;
  private:
  bool _internal_has_humidity() const;
  public:
  void clear_humidity();
  ::PROTOBUF_NAMESPACE_ID::int32 humidity() const;
  void set_humidity(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_humidity() const;
  void _internal_set_humidity(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required .Sensor.SwitchLevel door = 5;
  bool has_door() const;
  private:
  bool _internal_has_door() const;
  public:
  void clear_door();
  ::Sensor_SwitchLevel door() const;
  void set_door(::Sensor_SwitchLevel value);
  private:
  ::Sensor_SwitchLevel _internal_door() const;
  void _internal_set_door(::Sensor_SwitchLevel value);
  public:

  // @@protoc_insertion_point(class_scope:Sensor)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::Foo* foo_;
  double temperature_;
  ::PROTOBUF_NAMESPACE_ID::int32 humidity_;
  int door_;
  friend struct ::TableStruct_sensor_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Sensor

// required string name = 1;
inline bool Sensor::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Sensor::has_name() const {
  return _internal_has_name();
}
inline void Sensor::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Sensor::name() const {
  // @@protoc_insertion_point(field_get:Sensor.name)
  return _internal_name();
}
inline void Sensor::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:Sensor.name)
}
inline std::string* Sensor::mutable_name() {
  // @@protoc_insertion_point(field_mutable:Sensor.name)
  return _internal_mutable_name();
}
inline const std::string& Sensor::_internal_name() const {
  return name_.GetNoArena();
}
inline void Sensor::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Sensor::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Sensor.name)
}
inline void Sensor::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Sensor.name)
}
inline void Sensor::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Sensor.name)
}
inline std::string* Sensor::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Sensor::release_name() {
  // @@protoc_insertion_point(field_release:Sensor.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Sensor::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Sensor.name)
}

// required double temperature = 2;
inline bool Sensor::_internal_has_temperature() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Sensor::has_temperature() const {
  return _internal_has_temperature();
}
inline void Sensor::clear_temperature() {
  temperature_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double Sensor::_internal_temperature() const {
  return temperature_;
}
inline double Sensor::temperature() const {
  // @@protoc_insertion_point(field_get:Sensor.temperature)
  return _internal_temperature();
}
inline void Sensor::_internal_set_temperature(double value) {
  _has_bits_[0] |= 0x00000004u;
  temperature_ = value;
}
inline void Sensor::set_temperature(double value) {
  _internal_set_temperature(value);
  // @@protoc_insertion_point(field_set:Sensor.temperature)
}

// required int32 humidity = 3;
inline bool Sensor::_internal_has_humidity() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Sensor::has_humidity() const {
  return _internal_has_humidity();
}
inline void Sensor::clear_humidity() {
  humidity_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Sensor::_internal_humidity() const {
  return humidity_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Sensor::humidity() const {
  // @@protoc_insertion_point(field_get:Sensor.humidity)
  return _internal_humidity();
}
inline void Sensor::_internal_set_humidity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  humidity_ = value;
}
inline void Sensor::set_humidity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_humidity(value);
  // @@protoc_insertion_point(field_set:Sensor.humidity)
}

// required .Sensor.SwitchLevel door = 5;
inline bool Sensor::_internal_has_door() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Sensor::has_door() const {
  return _internal_has_door();
}
inline void Sensor::clear_door() {
  door_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::Sensor_SwitchLevel Sensor::_internal_door() const {
  return static_cast< ::Sensor_SwitchLevel >(door_);
}
inline ::Sensor_SwitchLevel Sensor::door() const {
  // @@protoc_insertion_point(field_get:Sensor.door)
  return _internal_door();
}
inline void Sensor::_internal_set_door(::Sensor_SwitchLevel value) {
  assert(::Sensor_SwitchLevel_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  door_ = value;
}
inline void Sensor::set_door(::Sensor_SwitchLevel value) {
  _internal_set_door(value);
  // @@protoc_insertion_point(field_set:Sensor.door)
}

// required .Foo foo = 6;
inline bool Sensor::_internal_has_foo() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || foo_ != nullptr);
  return value;
}
inline bool Sensor::has_foo() const {
  return _internal_has_foo();
}
inline const ::Foo& Sensor::_internal_foo() const {
  const ::Foo* p = foo_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Foo*>(
      &::_Foo_default_instance_);
}
inline const ::Foo& Sensor::foo() const {
  // @@protoc_insertion_point(field_get:Sensor.foo)
  return _internal_foo();
}
inline ::Foo* Sensor::release_foo() {
  // @@protoc_insertion_point(field_release:Sensor.foo)
  _has_bits_[0] &= ~0x00000002u;
  ::Foo* temp = foo_;
  foo_ = nullptr;
  return temp;
}
inline ::Foo* Sensor::_internal_mutable_foo() {
  _has_bits_[0] |= 0x00000002u;
  if (foo_ == nullptr) {
    auto* p = CreateMaybeMessage<::Foo>(GetArenaNoVirtual());
    foo_ = p;
  }
  return foo_;
}
inline ::Foo* Sensor::mutable_foo() {
  // @@protoc_insertion_point(field_mutable:Sensor.foo)
  return _internal_mutable_foo();
}
inline void Sensor::set_allocated_foo(::Foo* foo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(foo_);
  }
  if (foo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      foo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, foo, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  foo_ = foo;
  // @@protoc_insertion_point(field_set_allocated:Sensor.foo)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Sensor_SwitchLevel> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Sensor_SwitchLevel>() {
  return ::Sensor_SwitchLevel_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_sensor_2eproto
